Quarters Unity SDK

###############################

Supported platforms:
iOS
Android
WebGL

Configuration
Follow Getting Started guide to create your Quarter App.
https://weiks.github.io/quarters-docs/getting-started/


Unity integration
Import Quarters SDK from Unity Asset Store
Add QuartersSDK/Prefab/QuartersInit.prefab to your first scene
Copy your APP_ID and APP_KEY to QuartersInit inspector 



Platform specific setup

iOS
No platform specific setup is needed for iOS. Deep linking setup is handled automatically by a post process

Android
In Unity top menu go Quarters/Android/Generate Android Manifest. Android Manifest will automatically generate enabling deep linking.

If your project contain Android Manifest already, manual manifest merge will be required.



#################################


Authorization
----
Before you can use Quarters API you must authorize users session. From version 0.20.0 Quarters Unity SDK support guest mode. This allows to authorize user as guest and give full access
to Quarters features. Guest users can be converted to email users through Quarters.SignUp method. This workflow is required by Apple to conform to their user guidelines.


Example:

using QuartersSDK;

Quarters.Instance.AuthorizeGuest(OnAuthorizationSuccess, OnAuthorizationFailed);

 public void OnAuthorizationSuccess() {
	Debug.Log("OnAuthorizationSuccess"); }   public void OnAuthorizationFailed(string error) { 	Debug.LogError("OnAuthorizationFailed: " + error);  }

----
From this point user is able to buy, spend and get rewarded with Quarters. At some point user should be prompted by the app for signing up to create password protected Quarters account.
Only fully signed up users are able to use Quarters account between apps.

Example of converting guest user to signed up account:

Quarters.Instance.SignUp(OnAuthorizationSuccess, OnAuthorizationFailed);

public void OnAuthorizationSuccess() {
    Debug.Log("OnAuthorizationSuccess");
}


public void OnAuthorizationFailed(string error) {
    Debug.LogError("OnAuthorizationFailed: " + error);

}
 



Get User Details
----
Get user details can be only called after successful authorization. Success delegate returns User object with basic user details.


Example:

using QuartersSDK;

Quarters.Instance.GetUserDetails(delegate(User user) { 	Debug.Log("User loaded");  } , delegate (string error) { 	Debug.LogError("Cannot load the user details: " + error);  } );  


Get accounts
----
Get account can be only called after successful authorization. On success delegate will be called with a list of user accounts. (Note: only one user account is currently supported by the API)


Example:
----

using QuartersSDK;

Quarters.Instance.GetAccounts(delegate (List<User.Account> accounts) { 
//success                  }, delegate (string error) { 
//failed  });


Get Account Balance
----
Get account balance can be only called after successful authorization. On success delegate is fired with User.Account.Balance object


Example:

using QuartersSDK;

Quarters.Instance.GetAccountBalance(delegate (User.Account.Balance balance) {  }, delegate (string error) {   });




Get Account Reward
----
Get account reward can be only called after successful authorization. On success delegate is fired with User.Account.Reward object


Example:

using QuartersSDK;


Quarters.Instance.GetAccountReward(delegate (User.Account.Reward balance) {

}, delegate (string error) {

});




Transfer
----
Transfer request can be only called after successful authorization. This call allows to charge user quarters that will be transferred to your Quarters app. Transfer request is done through external browser, similar to Authorize call. On Success transaction hash is returned. Please note it can take up to 3 minutes for your transfer to appear.


Example:

using QuartersSDK;

TransferAPIRequest request = new TransferAPIRequest(int.Parse(tokensInput.text), descriptionInput.text, delegate (string transactionHash) {             
//success  }, delegate (string error) {

//failed              }); 
//start transfer Quarters.Instance.CreateTransfer(request);  

 


*************
RELEASE NOTES
*************

General notes:
- only one account is currently supported by API, hence Get Accounts and Account balance calls are working with first returned account

#####
0.40
- automated access token handling
- fixed issue with NRE thrown when transfer is requested before account data is loaded

#####
0.30.2
- fixed issues with IAP
  improved transferring flow when account isnt loaded yet

#####
0.30.1
- bug fixes


#####
0.30
- added WebGL support
- added Quarters awarding on client side
- removed PlayFab module due to PlayFab external API limits
- fixed issues with Android Manifest and latest versions of Unity
- added support for .NET 4.X scripting runtime
- fixed issues with IAP Module not initializing correctly when PlayFab module wasn't used
- added Quarters sandbox environment


#####
0.21.2
- fixed compilation issues when Standalone platform is set
- changed IAP naming conventions


#####
0.21.1
- better handling of out of balance errors
- added bonus quarters support

#####


#####
0.21.0
- added support for auto approval (approved developers only)

#####


#####
0.20.2
- fixed transfer issues when using guest account

#####

#####
0.20.1
- fixed issue with missing signup callbacks

#####


#####
0.20.0
- added guest mode for frictionless authentication

#####


#####
0.12.0
- easier to integrate iOS and Android In App Purchases

#####


#####
0.11.0
- Added Playfab IAP module
- Added In App Purchases support for iOS

#####


#####
0.10.0
- Web view support
- Authorize and Transfer requests can now be done within the app through webview, not external browser (Supported platforms, iOS, Android, Unity Editor on MacOS)
- Optional forceExternalBrowser added to Authorize and Transfer calls (false by default)
false

#####


#####
0.9.0
- Sessions persistance added. User will wont have to authorize quarters on every login anymore, only first time.
- Added deauthorize functionality to log user out of quarters 


#####


#####
0.8.1
- Fixed out of range exception when calling GetAccountBalance right after GetUserDetails


#####


#####
0.8.0
- Added PlayFab module
- Supporting PlayFab server side Quarters apps to user transfers


#####




#####
0.7.0
- Quarters UI added
- Editor scripts are now inheriting from UnityEditor.Editor to avoid potential conflicts with custom Editor namespace


#####


#####
0.6.0
- Added automated Android Manifest Generation in Quarters/Android/Generate Android Manifest
- Android package name can now contain uppercase characters


#####


#####
0.5.0
- Deep linking is now dynamic. Multiple apps using Quarters SDK are now supported on single Android or iOS device


#####


#####
0.4.0
- Added URIParser to better deep link parameters handling
- Full Transfer support on iOS and Android
- Added automated iOS post process builds
- iOS deep linking


#####


#####
0.3.0
- added seamless support for GetAccounts call
- added seamless support for GetAcdountBalance
- basic one way support for Transfering quarters added

known issues:
- no deep linking with parameters support for TransferRequest. Doe to lack of API support for this functionality. Its coming in next release.


#####

#####
0.2.0
- Added Android deep linking. Quarters SDK will now automatically handle URL schemes
- Android support added for oauth calls outside the app
- Basic Android Manifest added for handling linking, intents and permissions
- Android support for Authorize call
- Example - added simple on screen console


#####


#####
0.1.0
- Added simple authorization in editor
- Refresh and access token are handled during Authorization
- Added GetUserDetails API call with refreshing access token if expired



Known issues:


#####










